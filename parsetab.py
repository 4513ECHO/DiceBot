
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSrightDICE DICE DIVIDE EQUALS LPAREN MINUS NAME NUMBER PLUS RPAREN TIMESstatement : NAME EQUALS expressionstatement : expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression DICE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'EQUALS':([3,],[9,]),'TIMES':([3,5,6,7,8,10,16,17,18,19,20,21,22,],[-11,-10,12,-11,-8,12,12,-9,-6,-5,12,12,-7,]),'PLUS':([3,5,6,7,8,10,16,17,18,19,20,21,22,],[-11,-10,14,-11,-8,14,14,-9,-6,-5,-4,-3,-7,]),'NAME':([0,2,4,9,11,12,13,14,15,],[3,7,7,7,7,7,7,7,7,]),'DIVIDE':([3,5,6,7,8,10,16,17,18,19,20,21,22,],[-11,-10,11,-11,-8,11,11,-9,-6,-5,11,11,-7,]),'LPAREN':([0,2,4,9,11,12,13,14,15,],[4,4,4,4,4,4,4,4,4,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,],[2,2,-11,2,-10,13,-11,-8,2,13,2,2,2,2,2,13,-9,-6,-5,-4,-3,-7,]),'NUMBER':([0,2,4,9,11,12,13,14,15,],[5,5,5,5,5,5,5,5,5,]),'$end':([1,3,5,6,7,8,16,17,18,19,20,21,22,],[0,-11,-10,-2,-11,-8,-1,-9,-6,-5,-4,-3,-7,]),'RPAREN':([5,7,8,10,17,18,19,20,21,22,],[-10,-11,-8,17,-9,-6,-5,-4,-3,-7,]),'DICE':([3,5,6,7,8,10,16,17,18,19,20,21,22,],[-11,-10,15,-11,15,15,15,-9,15,15,15,15,15,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,2,4,9,11,12,13,14,15,],[6,8,10,16,18,19,20,21,22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','yacc.py',15),
  ('statement -> expression','statement',1,'p_statement_expr','yacc.py',19),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','yacc.py',23),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','yacc.py',24),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','yacc.py',25),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','yacc.py',26),
  ('expression -> expression DICE expression','expression',3,'p_expression_binop','yacc.py',27),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','yacc.py',43),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','yacc.py',47),
  ('expression -> NUMBER','expression',1,'p_expression_number','yacc.py',51),
  ('expression -> NAME','expression',1,'p_expression_name','yacc.py',55),
]
